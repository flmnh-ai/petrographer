---
title: "Inclusions Detection Model Training"
format: html
---

Training **inclusions detection** model for petrographic analysis with extended training (4000 iterations).

## Setup

```{r setup, message=FALSE}
library(tidyverse)
library(fs)
library(here)
library(petrographer)

# Validate dataset
validate_dataset(here::here("data/processed/inclusions"))
```

## Training

```{r training}
# Train model (HPC settings from .Renviron)
model_path <- train_model(
  data_dir = here::here("data/processed/inclusions"),
  output_name = "inclusions_v2",
  num_classes = 2,
  max_iter = 3000  # extended training for inclusions
)
```

## Evaluation

```{r evaluation}
# Load training metrics
eval_result <- evaluate_training(model_dir = model_path)
summary_stats <- eval_result$summary
```

## Visualization

```{r plots, fig.width=10, fig.height=6}
# Simple training curves
training_df <- eval_result$training_data
  
  # Loss plot
training_df |>
  select(iteration, contains("loss")) |>
  pivot_longer(-iteration, names_to = "loss_type", values_to = "loss") |>
  filter(!is.na(loss)) |>
  ggplot(aes(iteration, loss, color = loss_type)) +
  geom_line() +
  facet_wrap(~loss_type, scales = "free_y") +
  labs(title = "Training Loss - inclusions_v2") +
  theme_minimal() +
  theme(legend.position = "none")
  
eval_result$validation_data |>
    pivot_longer(-iteration, names_to = "metric", values_to = "value") |>
    filter(!is.na(value)) |>
    ggplot(aes(iteration, value)) +
    geom_line() +
    geom_point(size = 0.5) +
    facet_wrap(~metric, scales = "free_y") +
    labs(title = "Validation Metrics - inclusions_v2") +
    theme_minimal()
```

## Model Testing

```{r testing}
cat("\n== Testing Model ==\n")

# Load trained model
model <- load_model(
  model_path = path(model_path, "model_final.pth"),
  config_path = path(model_path, "config.yaml"),
  device = "cuda"
)

# Test on validation sample
val_images <- dir_ls(path(here::here("data/processed/inclusions"), "val"), 
                        regexp = "(?i)\\.(jpg|jpeg|png)$")

test_image <- val_images[1]

test_result <- predict_image(
  image_path = test_image,
  model = model,
  output_dir = here::here("results", "inclusions_v2_test")
)

cat(sprintf("Test image: %s\n", path_file(test_image)))
cat(sprintf("Objects detected: %d\n", nrow(test_result)))
cat(sprintf("Mean confidence: %.3f\n", mean(test_result$confidence)))
```

```{r}
library(magick)
list.files(here::here("results", "inclusions_v2_test"), full.names = TRUE)[[1]] |>
image_read() |>
  plot()
```

## Summary

```{r summary}
cat("\n== Training Summary ==\n")

if (exists("test_result") && nrow(test_result) > 0) {
  cat(sprintf("Model successfully tested with %d detections\n", nrow(test_result)))
}
```
