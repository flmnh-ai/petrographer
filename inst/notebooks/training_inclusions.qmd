---
title: "Inclusions Detection Model Training"
format: html
---

Training **inclusions detection** model for petrographic analysis with extended training (4000 iterations).

## Setup

```{r setup, message=FALSE}
library(tidyverse)
library(magick)
library(fs)
library(here)
library(petrographer)

data_dir <- here("data/processed/inclusions")

# Validate dataset
validate_dataset(data_dir)
```

## Training

```{r training}
# Train model
model_path <- train_model(
  data_dir = data_dir,
  output_name = "inclusions_v4",
  ims_per_batch = 16,
  num_workers = 16,
  hpc_cpus_per_task = 20,
  hpc_mem = "96gb",
  eval_period = 500,
  max_iter = 2000,
  num_classes = 2
)
```

## Evaluation

```{r evaluation}
# Load training metrics
eval_result <- evaluate_training(model_path)
```

```{r plots}
# Loss
eval_result$training_data |>
  select(iteration, contains("loss")) |>
  pivot_longer(-iteration, names_to = "loss_type", values_to = "loss") |>
  filter(!is.na(loss)) |>
  ggplot(aes(iteration, loss)) +
  geom_line() +
  facet_wrap(~loss_type, scales = "free_y") +
  labs(title = "Training Loss - inclusions_v2") +
  theme_minimal() +
  theme(legend.position = "none")

# Validation metrics  
eval_result$validation_data |>
    pivot_longer(-iteration, names_to = "metric", values_to = "value") |>
    filter(!is.na(value)) |>
    ggplot(aes(iteration, value)) +
    geom_line() +
    geom_point(size = 0.5) +
    facet_wrap(~metric, scales = "free_y") +
    labs(title = "Validation Metrics - inclusions_v2") +
    theme_minimal()
```

## Model Testing

```{r testing}
cat("\n== Testing Model ==\n")

# Load trained model
model <- load_model(
  model_path = path(model_path, "model_final.pth"),
  config_path = path(model_path, "config.yaml")
)

# Test on validation sample
val_images <- dir_ls(here('data/processed/inclusions/valid'), 
                     glob = '*.jpg')

test_image <- val_images[2]

test_result <- predict_image(
  image_path = test_image,
  model = model,
  output_dir = here('results/inclusions_v3_test')
)

cat(sprintf("Test image: %s\n", path_file(test_image)))
cat(sprintf("Objects detected: %d\n", nrow(test_result)))
cat(sprintf("Mean confidence: %.3f\n", mean(test_result$confidence)))
```


```{r}
library(magick)
pred_image <- test_image |>
  path_file() |>
  path_ext_remove() |>
  paste0('_prediction.png')

image_read(test_image) |> plot()
here('results/inclusions_v3_test', pred_image) |>
  image_read() |>
  plot()
```
```{r}
test_image <- here('data/lyons_annotations/img') |>
dir_ls()

test_result <- predict_image(
  image_path = test_image[[6]],
  model = model,
  slice_size = 1024,
  output_dir = here('results/inclusions_v3_test')
)
```


## Summary

```{r summary}
cat("\n== Training Summary ==\n")

if (exists("test_result") && nrow(test_result) > 0) {
  cat(sprintf("Model successfully tested with %d detections\n", nrow(test_result)))
}
```
