---
title: "Shell Detection Model Training"
format: html
---

Training **shell detection** model for petrographic analysis with 5 object classes.

## Setup

```{r setup, message=FALSE}
library(tidyverse)
library(fs)
library(here)
library(petrographer)

# Validate dataset
validate_dataset(here::here("data/processed/shell_mixed"))
```

## Training

```{r training}
# Train model (HPC settings from .Renviron)
model_path <- train_model(
  data_dir = here::here("data/processed/shell_mixed"),
  output_name = "shell_detector_v3",
  num_classes = 5
  # Uses defaults: max_iter=2000, learning_rate=0.0025, device="cuda", eval_period=100
)
```

## Evaluation

```{r evaluation}
# Load training metrics
eval_result <- evaluate_training(model_dir = model_path)
summary_stats <- eval_result$summary
```

## Visualization

```{r plots, fig.width=10, fig.height=6}
if (nrow(eval_result$training_data) > 0) {
  # Simple training curves
  training_df <- eval_result$training_data
  
  # Loss plot
  loss_plot <- training_df |>
    select(iteration, contains("loss")) |>
    pivot_longer(-iteration, names_to = "loss_type", values_to = "loss") |>
    filter(!is.na(loss)) |>
    ggplot(aes(iteration, loss, color = loss_type)) +
    geom_line() +
    facet_wrap(~loss_type, scales = "free_y") +
    labs(title = "Training Loss - shell_detector_v3") +
    theme_minimal() +
    theme(legend.position = "none")
  
  print(loss_plot)
  
  # Validation metrics if available
  if ("validation_data" %in% names(eval_result) && nrow(eval_result$validation_data) > 0) {
    val_plot <- eval_result$validation_data |>
      pivot_longer(-iteration, names_to = "metric", values_to = "value") |>
      filter(!is.na(value)) |>
      ggplot(aes(iteration, value)) +
      geom_line() +
      geom_point(size = 0.5) +
      facet_wrap(~metric, scales = "free_y") +
      labs(title = "Validation Metrics - shell_detector_v3") +
      theme_minimal()
    
    print(val_plot)
  }
}
```

## Model Testing

```{r testing}
cat("\n== Testing Model ==\n")

# Load trained model
model <- load_model(
  model_path = path(model_path, "model_final.pth"),
  config_path = path(model_path, "config.yaml"),
  device = "cuda"
)

# Test on validation sample
val_images <- dir_ls(path(here::here("data/processed/shell_mixed"), "val"), 
                        regexp = "(?i)\\.(jpg|jpeg|png)$")

if (length(val_images) > 0) {
  test_image <- val_images[1]
  
  test_result <- predict_image(
    image_path = test_image,
    model = model,
    output_dir = here::here("results", "shell_detector_v3_test")
  )
  
  cat(sprintf("Test image: %s\n", path_file(test_image)))
  cat(sprintf("Objects detected: %d\n", nrow(test_result)))
  
  if (nrow(test_result) > 0) {
    cat(sprintf("Mean confidence: %.3f\n", mean(test_result$confidence)))
  }
} else {
  cat("Warning: No validation images found for testing\n")
}
```

## Summary

```{r summary}
cat("\n== Training Summary ==\n")

if (exists("test_result") && nrow(test_result) > 0) {
  cat(sprintf("Model successfully tested with %d detections\n", nrow(test_result)))
}

cat("\n=== Next Steps ===\n")
cat("• Review training convergence\n")
cat("• Test on additional images\n")
cat("• Compare with previous versions\n")
cat("• Archive model in zoo\n")
```
